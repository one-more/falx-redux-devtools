!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("falx")):"function"==typeof define&&define.amd?define(["falx"],t):"object"==typeof exports?exports["falx-redux-devtools"]=t(require("falx")):e["falx-redux-devtools"]=t(e.falx)}(window,function(e){return function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(t,r){t.exports=e},function(e,t,r){"use strict";r.r(t),r.d(t,"connectDevtools",function(){return i});var o=r(0);function n(e,t,r){if("function"==typeof t&&void 0===r&&(r=t,t=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(n)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");let o=e,i=t,u=[],c=u,s=!1;function f(){c===u&&(c=u.slice())}function a(e){if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(s)throw new Error("Reducers may not dispatch actions.");try{s=!0,i=o(i,e)}finally{s=!1}const t=u=c;for(let e=0;e<t.length;e++){(0,t[e])()}return e}return a({type:"@@redux/INIT"}),{dispatch:a,subscribe:function(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(s)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See http://redux.js.org/docs/api/Store.html#subscribe for more details.");let t=!0;return f(),c.push(e),function(){if(!t)return;if(s)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See http://redux.js.org/docs/api/Store.html#subscribe for more details.");t=!1,f();const r=c.indexOf(e);c.splice(r,1)}},getState:function(){if(s)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}}}function i(e){const t=n(o.store.getState,e);Object(o.use)(function(e,r,o){return r.then(e=>(t.dispatch(o),e))})}}])});